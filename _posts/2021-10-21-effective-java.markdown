---
layout: post
title:  "Effective Java. Конспект"
date:   2021-11-21 15:06:24 +0300
categories: books
---

## Preface
Java развивается, становится большим и сложным.
Нужно поддерживать пособие/руководство по лучшим практикам, поэтому "Effective Java" получила третье издание.
Автор был архитектором платформенных библиотек Java, многих других библиотек, поэтому он хочет поделиться опытом.

## Глава 1. Введение
Книга содержит 90 поинтов - 90 правил. Каждое правило охватывает практику, помогающую лучшим программистам.
В большинстве поинтов есть примеры кода, во многих приводятся антипаттерны, объясняется, почему такой код плох, приводятся альтернативы.\
Эта книга не для начинающих.

Большинство правил основываются на нескольких базовых принципах: понятность и простота имеют первостепенное значение, поведение компонентов должно быть предсказуемым (а не удивлять), компоненты должны быть мелкими, насколько это возможно, но не меньше; код должен переиспользоваться, а не копироваться; зависимости между компонентами должны быть сведены к минимуму; ошибки должны быть обнаружены как можно раньше - в идеале во время компиляции.\
Приведённые в книге правила нацелены на улучшение поддерживаемости кода.

## Глава 2. Создание и удаление объектов

### 1. Используйте статические методы вместо контсрукторов, потому что
  - у них есть содержательные имена и можно иметь несколько статических методов с разными именами и одинаковыми типами параметров
  - они могут не создавать объект, а, например, брать его из пула
  - они могут возвращать объект любого производного типа
  - можно безопасно изменить класс возвращаемого объекта, если интерфейс совпадает
  - класс возвращаемого объекта может не существовать, когда мы пишем статический метод

### 2. Попробуйте Builder, если у конструктора много параметров

Когда есть объект с кучей опциональных параметров, он может иметь много конструкторов, каждый вызывает предыдущий и содержит умолчания для опциональных параметров.
Можно использовать подход JavaBeans и добавлять все параметры через сеттеры, но это достаточно многословно и порождает неконсистентное состояние объекта.

В таком случае лучше использовать Builder. Клиентский код получается легкочитаемым, легкоизменяемым. Этот паттерн костылит именованные параметры со значениями по умолчанию из других языков.

Проверяйте инварианты в конструкторе билдера и его методах, чтобы узнать об ошибках как можно раньше. Билдер хорошо сочетается с иерархиями классов - абстрактные классы будут содержать абстрактные билдеры, а конкретные - их реализации.
Смотри [Is there a way to refer to the current type with a type variable? - stackoverflow][1].

### 3.

[1]: https://stackoverflow.com/questions/7354740/is-there-a-way-to-refer-to-the-current-type-with-a-type-variable
