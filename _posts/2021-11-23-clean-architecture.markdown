---
layout: post
title:  "Чистая архитектура. Конспект"
date:   2021-11-23 13:58:24 +0300
categories: books
---


## 3. Принципы дизайна

SOLID определяет, как скомпоновать функции и структуры данных в модули, как они должны сочетаться.

Цель принципов - создать программные структуры среднего уровня, которые:

- терпимы к изменениям
- понятны
- образуют основу компонентов, которые могут использоваться во множестве программных систем

Так как SOLID применим к модулям среднего уровня, он не гарантирует чистоту на других уровнях.


1. SRP (Single Responsibilty Principle) - принцип единой ответственности\
  Следствие закона Конвея (Организации проектируют системы, которые копируют структуру коммуникаций в этой организации):\
  Лучшая структура программной системы находится под сильным влиянием социальной структуры организации, которая её использует.
  Поэтому каждый программный модуль должен иметь одну и только одну причину для изменений.

2. OCP (Open-Closed Principle) - принцип открытости/закрытости\
  Чтобы программные системы были легко изменяемыми, они должны быть спроектированы так:
  чтобы поменять их поведение, скорее надо добавить новый код, чем менять существующий.

3. LSP (The Liskov Substitution Principle) - принцип подстановки Лисков\
  Принцип говорит, что чтобы строить системы из взаимозаменямых компонентов,
  надо, чтобы эти компоненты соответствовали контракту, который позволяет компонентам
  быть взаимозаменяемыми.

4. ISP (Interface Segragation Principle) - принцип разделения интерфейсов\
  Принцип советует избегать неиспользуемых зависимостей.

5. DIP (Dependency Inversion Principle) - принцип инверсии зависимостей\
  Высокоуровневые компоненты не должны зависеть от низкоуровневых реализаций.
  Наоборот, детали должны зависеть от политик (контрактов, абстракций).

Мы сосредоточимся на архитектурных реализациях этих принципов.
Более подробное описание можно посмотреть в

- "Agile Software Development, Principles, Patterns, and Practices" - Robert C. Martin, Prentice Hall, 2002
- Статья Боба Мартина [Принципы Объектно-ориентированного дизайна][1]
- Статья на Википедии [SOLID][2]
- или просто загуглить "SOLID"

Судя по всему книга
"Принципы, паттерны и методики гибкой разработки на языке C#" - Р. С. Мартин, М. Мартин, Символ-Плюс, 2010
является переводом одного из изданий "Agile Software Development, Principles, Patterns, and Practices"

### 7. Принцип единой ответственности

Самый недопонятый принцип, видимо, потому что у него не самое удачное имя.
Программисты, слыша его, думают, что модуль должен делать только одну вещь.
Такой принцип есть, но он относится к более низкоуровневым функциям.

Исторически SRP описан так:
> Модуль должен иметь одну и только одну причину для изменения.

Программные системы изменяются, чтобы удовлетворять пользователей и заказчиков (stakeholders).
Эти пользователи и заказчики и есть "причины для изминения".

[1]: http://www.butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod
[2]: https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)
